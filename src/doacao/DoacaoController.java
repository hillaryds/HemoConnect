package doacao;

import java.sql.Date;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

/**
 * Controller - Classe DoacaoController
 * Respons√°vel pela l√≥gica de neg√≥cio, manipula√ß√£o de dados e coordena√ß√£o entre
 * Model e View
 * Integrado com PostgreSQL atrav√©s do DAO
 */
public class DoacaoController {

    /**
     * Registra uma nova doa√ß√£o no sistema
     */
    public static Doacao registrarDoacao(Doacao doacao) {
        try {
            // Valida√ß√µes de neg√≥cio
            if (!validarDoacao(doacao)) {
                return null;
            }

            // Persiste no banco via DAO
            return DoacaoDAO.inserir(doacao);

        } catch (SQLException e) {
            DoacaoView.exibirMensagemErro("Erro ao registrar doa√ß√£o: " + e.getMessage());
            if (e.getMessage().contains("violates foreign key constraint")) {
                DoacaoView.exibirMensagemErro("üí° Dica: Verifique se triagem_id e doador_id existem!");
            }
            return null;
        }
    }

    /**
     * Lista doa√ß√µes de uma data espec√≠fica
     */
    public static List<Doacao> listarDoacoesPorData(Date data) {
        try {
            return DoacaoDAO.buscarPorData(data);
        } catch (SQLException e) {
            DoacaoView.exibirMensagemErro("Erro ao buscar doa√ß√µes: " + e.getMessage());
            return null;
        }
    }

    /**
     * Busca doa√ß√£o por ID
     */
    public static Doacao buscarDoacaoPorId(Long id) {
        try {
            return DoacaoDAO.buscarPorId(id);
        } catch (SQLException e) {
            DoacaoView.exibirMensagemErro("Erro ao buscar doa√ß√£o: " + e.getMessage());
            return null;
        }
    }

    /**
     * Lista todas as doa√ß√µes (limitado a 50)
     */
    public static List<Doacao> listarTodasDoacoes() {
        try {
            return DoacaoDAO.buscarTodas();
        } catch (SQLException e) {
            DoacaoView.exibirMensagemErro("Erro ao listar doa√ß√µes: " + e.getMessage());
            return null;
        }
    }

    /**
     * Atualiza uma doa√ß√£o existente
     */
    public static boolean atualizarDoacao(Doacao doacao) {
        try {
            // Valida√ß√µes de neg√≥cio
            if (!validarDoacao(doacao)) {
                return false;
            }

            return DoacaoDAO.atualizar(doacao);

        } catch (SQLException e) {
            DoacaoView.exibirMensagemErro("Erro ao atualizar doa√ß√£o: " + e.getMessage());
            return false;
        }
    }

    /**
     * Remove uma doa√ß√£o do sistema
     */
    public static boolean removerDoacao(Long id) {
        try {
            return DoacaoDAO.deletar(id);
        } catch (SQLException e) {
            DoacaoView.exibirMensagemErro("Erro ao remover doa√ß√£o: " + e.getMessage());
            return false;
        }
    }

    /**
     * Obt√©m estat√≠sticas do dia
     */
    public static Map<String, Object> obterEstatisticasDia(Date data) {
        try {
            return DoacaoDAO.obterEstatisticasDia(data);
        } catch (SQLException e) {
            DoacaoView.exibirMensagemErro("Erro ao obter estat√≠sticas: " + e.getMessage());
            return null;
        }
    }

    /**
     * Obt√©m estat√≠sticas do m√™s
     */
    public static Map<String, Object> obterEstatisticasMes(int mes, int ano) {
        try {
            return DoacaoDAO.obterEstatisticasMes(mes, ano);
        } catch (SQLException e) {
            DoacaoView.exibirMensagemErro("Erro ao obter estat√≠sticas mensais: " + e.getMessage());
            return null;
        }
    }

    /**
     * Obt√©m estat√≠sticas gerais do sistema
     */
    public static Map<String, Object> obterEstatisticasGerais() {
        try {
            return DoacaoDAO.obterEstatisticasGerais();
        } catch (SQLException e) {
            DoacaoView.exibirMensagemErro("Erro ao obter estat√≠sticas gerais: " + e.getMessage());
            return null;
        }
    }

    /**
     * Processa a op√ß√£o do menu selecionada
     */
    public static void processarOpcaoMenu(int opcao) {
        switch (opcao) {
            case 1:
                processarRegistroDoacao();
                break;
            case 2:
                processarListagemDia();
                break;
            case 3:
                processarEstatisticasDia();
                break;
            case 4:
                processarEstatisticasMes();
                break;
            case 5:
                processarBuscaPorId();
                break;
            case 6:
                processarListagemTodas();
                break;
            case 7:
                processarAtualizacao();
                break;
            case 8:
                processarRemocao();
                break;
            case 9:
                processarEstatisticasGerais();
                break;
            case 0:
                System.out.println("Saindo do sistema...");
                break;
            default:
                DoacaoView.exibirMensagemErro("Op√ß√£o inv√°lida!");
        }
    }

    /**
     * Processa registro de nova doa√ß√£o
     */
    private static void processarRegistroDoacao() {
        Doacao doacao = DoacaoView.coletarDadosNovaDoacao();
        if (doacao != null) {
            Doacao doacaoSalva = registrarDoacao(doacao);
            if (doacaoSalva != null) {
                DoacaoView.exibirMensagemSucesso("DOA√á√ÉO REGISTRADA", doacaoSalva);
            }
        }
    }

    /**
     * Processa listagem por dia
     */
    private static void processarListagemDia() {
        Date data = DoacaoView.coletarData();
        if (data != null) {
            List<Doacao> doacoes = listarDoacoesPorData(data);
            if (doacoes != null) {
                DoacaoView.exibirListaDoacoes(doacoes, "DOA√á√ïES DE " + data);
            }
        }
    }

    /**
     * Processa estat√≠sticas do dia
     */
    private static void processarEstatisticasDia() {
        Date data = DoacaoView.coletarData();
        if (data != null) {
            Map<String, Object> stats = obterEstatisticasDia(data);
            if (stats != null) {
                DoacaoView.exibirEstatisticasDia(
                        (Integer) stats.get("total"),
                        (Double) stats.get("volumeTotal"),
                        data);
            }
        }
    }

    /**
     * Processa estat√≠sticas do m√™s
     */
    private static void processarEstatisticasMes() {
        int[] mesAno = DoacaoView.coletarMesAno();
        if (mesAno != null) {
            Map<String, Object> stats = obterEstatisticasMes(mesAno[0], mesAno[1]);
            if (stats != null) {
                DoacaoView.exibirEstatisticasMes(
                        (Integer) stats.get("total"),
                        (Double) stats.get("volumeTotal"),
                        mesAno[0],
                        mesAno[1]);
            }
        }
    }

    /**
     * Processa busca por ID
     */
    private static void processarBuscaPorId() {
        Long id = DoacaoView.coletarId();
        if (id != null) {
            Doacao doacao = buscarDoacaoPorId(id);
            DoacaoView.exibirDoacao(doacao);
        }
    }

    /**
     * Processa listagem de todas as doa√ß√µes
     */
    private static void processarListagemTodas() {
        List<Doacao> doacoes = listarTodasDoacoes();
        if (doacoes != null) {
            DoacaoView.exibirListaDoacoes(doacoes, "√öLTIMAS 50 DOA√á√ïES");
        }
    }

    /**
     * Processa atualiza√ß√£o de doa√ß√£o
     */
    private static void processarAtualizacao() {
        Long id = DoacaoView.coletarId();
        if (id != null) {
            Doacao doacaoAtual = buscarDoacaoPorId(id);
            if (doacaoAtual != null) {
                DoacaoView.exibirDoacao(doacaoAtual);
                Doacao doacaoAtualizada = DoacaoView.coletarDadosAtualizacao(doacaoAtual);

                if (doacaoAtualizada != null) {
                    if (atualizarDoacao(doacaoAtualizada)) {
                        DoacaoView.exibirMensagemSucesso("DOA√á√ÉO ATUALIZADA", doacaoAtualizada);
                    }
                }
            } else {
                DoacaoView.exibirMensagemErro("Doa√ß√£o n√£o encontrada");
            }
        }
    }

    /**
     * Processa remo√ß√£o de doa√ß√£o
     */
    private static void processarRemocao() {
        Long id = DoacaoView.coletarId();
        if (id != null) {
            Doacao doacao = buscarDoacaoPorId(id);
            if (doacao != null) {
                if (DoacaoView.confirmarRemocao(doacao)) {
                    if (removerDoacao(id)) {
                        DoacaoView.exibirMensagemSucesso("DOA√á√ÉO REMOVIDA", null);
                    }
                } else {
                    System.out.println("Remo√ß√£o cancelada");
                }
            } else {
                DoacaoView.exibirMensagemErro("Doa√ß√£o n√£o encontrada");
            }
        }
    }

    /**
     * Processa estat√≠sticas gerais
     */
    private static void processarEstatisticasGerais() {
        Map<String, Object> stats = obterEstatisticasGerais();
        if (stats != null) {
            DoacaoView.exibirEstatisticasGerais(
                    (Integer) stats.get("totalGeral"),
                    (Double) stats.get("volumeGeral"),
                    (Integer) stats.get("hoje"),
                    (Integer) stats.get("esteMes"));
        }
    }

    /**
     * Valida os dados de uma doa√ß√£o
     */
    private static boolean validarDoacao(Doacao doacao) {
        if (doacao == null) {
            DoacaoView.exibirMensagemErro("Dados da doa√ß√£o inv√°lidos");
            return false;
        }

        if (doacao.getData() == null) {
            DoacaoView.exibirMensagemErro("Data √© obrigat√≥ria");
            return false;
        }

        if (doacao.getHora() == null) {
            DoacaoView.exibirMensagemErro("Hora √© obrigat√≥ria");
            return false;
        }

        if (doacao.getVolume() < 350 || doacao.getVolume() > 500) {
            DoacaoView.exibirMensagemErro("Volume deve estar entre 350ml e 500ml");
            return false;
        }

        if (doacao.getTriagemId() == null) {
            DoacaoView.exibirMensagemErro("ID da triagem √© obrigat√≥rio");
            return false;
        }

        if (doacao.getDoadorId() == null) {
            DoacaoView.exibirMensagemErro("ID do doador √© obrigat√≥rio");
            return false;
        }

        return true;
    }
}
